package com.example.to_do_list.ui.tasklist

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.domain.model.Task
import com.example.domain.model.UnsplashPhoto // <-- –ù–û–í–´–ô –ò–ú–ü–û–†–¢
import com.example.domain.usecases.AddTaskUseCase
import com.example.domain.usecases.DeleteTaskUseCase
import com.example.domain.usecases.GetTasksUseCase
import com.example.domain.usecases.GetUnsplashPhotosUseCase // <-- –ù–û–í–´–ô –ò–ú–ü–û–†–¢
import com.example.domain.usecases.RefreshTasksUseCase
import com.example.domain.usecases.UpdateTaskUseCase
import com.example.to_do_list.ui.state.UiState
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.catch
import kotlinx.coroutines.flow.launchIn
import kotlinx.coroutines.flow.onEach
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import javax.inject.Inject


@HiltViewModel
class TaskViewModel @Inject constructor(
    private val getTasksUseCase: GetTasksUseCase,
    private val getUnsplashPhotosUseCase: GetUnsplashPhotosUseCase,
    private val addTaskUseCase: AddTaskUseCase,
    private val refreshTasksUseCase: RefreshTasksUseCase,
    private val updateTaskUseCase: UpdateTaskUseCase,
    private val deleteTaskUseCase: DeleteTaskUseCase
) : ViewModel() {

    private val _uiState = MutableStateFlow(UiState(isLoading = true, tasks = emptyList(), error = null))
    val uiState: StateFlow<UiState> = _uiState.asStateFlow()

    // –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –°–ü–ò–°–ö–ê –§–û–¢–û UNSPLASH
    private val _unsplashPhotos = MutableStateFlow<List<UnsplashPhoto>>(emptyList())
    val unsplashPhotos: StateFlow<List<UnsplashPhoto>> = _unsplashPhotos.asStateFlow()

    // –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –ò–ù–î–ò–ö–ê–¢–û–†–ê –ó–ê–ì–†–£–ó–ö–ò –§–û–¢–û
    private val _isPhotosLoading = MutableStateFlow(false)
    val isPhotosLoading: StateFlow<Boolean> = _isPhotosLoading.asStateFlow()

    init {
        observeTasks()
        refreshTasksFromNetwork()
    }

    // --- –ú–µ—Ç–æ–¥—ã –¥–ª—è UI-–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è ---



    fun retry() {
        refreshTasksFromNetwork()
        _uiState.value = _uiState.value.copy(error = null, isLoading = true)
    }

    fun clearError() {
        _uiState.value = _uiState.value.copy(error = null)
    }


    // –ù–û–í–´–ô –ú–ï–¢–û–î: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∏–∑ Unsplash
    fun loadUnsplashPhotos() {
        viewModelScope.launch {
            _isPhotosLoading.value = true
            try {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º 30 —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
                val photos = getUnsplashPhotosUseCase.execute(count = 30)
                _unsplashPhotos.value = photos
                Log.d("TaskViewModel", "üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${photos.size} —Ñ–æ—Ç–æ –∏–∑ Unsplash.")
            } catch (e: Exception) {
                Log.e("TaskViewModel", "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ Unsplash: ${e.message}")
                // –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                _uiState.value = _uiState.value.copy(
                    error = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Unsplash."
                )
            } finally {
                _isPhotosLoading.value = false
            }
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ (–ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞)
    fun clearUnsplashPhotos() {
        _unsplashPhotos.value = emptyList()
    }

    // --- –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–æ–≥–∏–∫–∏ ViewModel (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

    private fun observeTasks() {
        getTasksUseCase.execute()
            .onEach { tasks ->
                _uiState.value = _uiState.value.copy(
                    tasks = tasks,
                    isLoading = false,
                    error = null
                )
                Log.d("TaskViewModel", "üß© UI –æ–±–Ω–æ–≤–ª—ë–Ω –∏–∑ Room: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${tasks.size} –∑–∞–¥–∞—á")
            }
            .catch { e ->
                _uiState.value = UiState(
                    error = e.message ?: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞",
                    isLoading = false,
                    tasks = emptyList()
                )
                Log.e("TaskViewModel", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–∏ –∑–∞ –∑–∞–¥–∞—á–∞–º–∏ –∏–∑ Room: ${e.message}")
            }
            .launchIn(viewModelScope)
    }

    fun refreshTasksFromNetwork() {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(isLoading = true, error = null)
            Log.d("TaskViewModel", "üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ —Å–µ—Ç–∏...")
            val success = refreshTasksUseCase.execute()
            if (success) {
                Log.d("TaskViewModel", "‚úÖ –ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Å–µ—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Room.")
            } else {
                Log.e("TaskViewModel", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –∏–∑ —Å–µ—Ç–∏.")
                _uiState.value = _uiState.value.copy(
                    error = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞.",
                )
            }
            if (_uiState.value.tasks.isEmpty() && !success) {
                _uiState.value = _uiState.value.copy(isLoading = false)
            }
        }
    }

    fun addNewTask(title: String, imageUrl: String?) {
        viewModelScope.launch {
            if (title.isBlank()) {
                _uiState.value = _uiState.value.copy(
                    error = "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
                )
                return@launch
            }

            val newTask = Task(
                id = 0, // ID 0 —É–∫–∞–∑—ã–≤–∞–µ—Ç Room –Ω–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                title = title,
                status = false,
                imageUrl = imageUrl,
                isLocalOnly = true // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω—É—é
            )

            try {
                val success = addTaskUseCase.execute(newTask) // <-- –í—ã–∑–æ–≤ Use Case
                if (success) {
                    Log.d("TaskViewModel", "‚úÖ –ó–∞–¥–∞—á–∞ '$title' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ.")
                    // UI –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Ç–∞–∫ –∫–∞–∫ observeTasks —Å–ª—É—à–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Room
                } else {
                    Log.e("TaskViewModel", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É '$title'.")
                    _uiState.value = _uiState.value.copy(
                        error = "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É."
                    )
                }
            } catch (e: Exception) {
                Log.e("TaskViewModel", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ AddTaskUseCase: ${e.message}")
                _uiState.value = _uiState.value.copy(
                    error = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ${e.message}"
                )
            }
        }
    }

    fun toggleTaskStatus(task: Task) {
        viewModelScope.launch {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é Task —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º (–∫–æ–ø–∏—Ä—É—è –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è)
            val updatedTask = task.copy(status = !task.status)
            Log.d("TaskViewModel", "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–¥–∞—á–∏ '${task.title}' –Ω–∞ ${updatedTask.status}")
            val success = updateTaskUseCase.execute(updatedTask) // <-- –í—ã–∑—ã–≤–∞–µ–º Use Case
            if (!success) {
                _uiState.update { it.copy(error = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ '${task.title}'.") }
                Log.e("TaskViewModel", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–¥–∞—á–∏ '${task.title}'.")
            } else {
                // UI –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è Flow –∏–∑ Room
                Log.d("TaskViewModel", "‚úÖ –°—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–¥–∞—á–∏ '${task.title}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
            }
        }
    }

    fun saveEditedTask(task: Task) {
        viewModelScope.launch {
            if (task.title.isBlank()) {
                _uiState.update { it.copy(error = "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.") }
                return@launch
            }
            Log.d("TaskViewModel", "üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É '${task.title}' (ID: ${task.id})")
            val success = updateTaskUseCase.execute(task) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ Use Case –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (!success) {
                _uiState.update { it.copy(error = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ '${task.title}'.") }
                Log.e("TaskViewModel", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ '${task.title}'.")
            } else {
                Log.d("TaskViewModel", "‚úÖ –ó–∞–¥–∞—á–∞ '${task.title}' —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞.")
            }
        }
    }

    fun deleteTask(taskId: Int) {
        viewModelScope.launch {
            Log.d("TaskViewModel", "üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É —Å ID: $taskId")
            val success = deleteTaskUseCase.execute(taskId)
            if (!success) {
                _uiState.update { it.copy(error = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É —Å ID $taskId.") }
                Log.e("TaskViewModel", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É —Å ID $taskId.")
            } else {
                Log.d("TaskViewModel", "‚úÖ –ó–∞–¥–∞—á–∞ —Å ID $taskId —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
                // UI –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è Flow –∏–∑ Room
            }
        }
    }


}