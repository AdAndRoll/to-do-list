package com.example.to_do_list.ui


import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.domain.model.Task
import com.example.domain.usecases.GetTasksUseCase
import com.example.to_do_list.ui.state.UiState
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject



@HiltViewModel
class TaskViewModel @Inject constructor(
    private val getTasksUseCase: GetTasksUseCase
) : ViewModel() {
    private val _uiState = MutableStateFlow(UiState(isLoading = true))
    val uiState: StateFlow<UiState> = _uiState

    init {
        loadTasks()
    }

    fun retry() {
        loadTasks()
    }


    private fun loadTasks() {
        viewModelScope.launch {
            _uiState.value = UiState(isLoading = true, tasks = emptyList(), error = null)

            try {
                val allTasks = mutableListOf<Task>()

                getTasksUseCase.execute().collect { newTasksPortion ->
                    allTasks.addAll(newTasksPortion)
                    _uiState.value = _uiState.value.copy(
                        tasks = allTasks.toList(),
                        isLoading = true, // –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –∏–¥—É—Ç –ø–æ—Ä—Ü–∏–∏
                        error = null
                    )
                    Log.d("TaskViewModel", "üß© UI –æ–±–Ω–æ–≤–ª—ë–Ω: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${allTasks.size} –∑–∞–¥–∞—á")
                }

                // –ö–æ–≥–¥–∞ –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (collect –≤—ã—à–µ–ª), —Å–Ω–∏–º–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                _uiState.value = _uiState.value.copy(
                    isLoading = false
                )

            } catch (e: Exception) {
                _uiState.value = UiState(
                    error = e.message ?: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
                    isLoading = false,
                    tasks = emptyList()
                )
                Log.e("TaskViewModel", "‚ùå –û—à–∏–±–∫–∞ –≤ loadTasks: ${e.message}")
            }
        }
    }




    fun clearError() {
        _uiState.value = _uiState.value.copy(error = null)
    }
}